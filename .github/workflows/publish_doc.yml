name: Publish Documentation

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-publish-docs:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Install tools
      run: |
        dotnet tool install -g docfx
        dotnet tool install -g dll2mmd
        dotnet tool install -g dotnet-reportgenerator-globaltool
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Setup .NET 6 runtime (for dll2mmd)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Run tests with coverage
      run: dotnet test --configuration Release --collect:"XPlat Code Coverage"

    - name: Generate coverage report
      run: |
        mkdir -p Cobertura
        reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:Cobertura" -reporttypes:MarkdownSummaryGithub

    - name: Setup .NET 6 runtime (for dll2mmd)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Generate class diagram
      run: |
        dll2mmd -f App/bin/Release/net8.0/App.dll -o disenio.md

    - name: Create index.md
      run: |
        cat > index.md << 'EOF'
        # DocumentaciÃ³n de la AplicaciÃ³n

        ## [ğŸ“Š Diagrama de Clases](disenio.md)
        ## [ğŸ§ª Cobertura de Pruebas](Cobertura/SummaryGithub.md)
        EOF

    - name: Build documentation (docfx)
      run: |
        docfx metadata || echo "Metadata generation completed"
        docfx build || echo "DocFX build completed"

    - name: Prepare site folder
      run: |
        mkdir _site
        cp -r Cobertura _site/
        cp disenio.md _site/
        cp index.md _site/
        if [ -d \"_site\" ]; then cp -r _site/* .; fi

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
